"""
Webtoons Scan Scraper - GitHub Release v3.1

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫–∞–Ω—ñ–≤ –∑ translate.webtoons.com –Ω–∞ Google Drive
"""

import os
import re
import time
import json
import requests
from io import BytesIO
from PIL import Image
from urllib.parse import urlparse
from concurrent.futures import ThreadPoolExecutor, as_completed

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

from webdriver_manager.chrome import ChromeDriverManager

# ============================================================================
# CONFIGURATION
# ============================================================================

def load_config():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ config.json"""
    config_file = 'config.json'

    if not os.path.exists(config_file):
        if os.path.exists('config.example.json'):
            print("‚ö† config.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            print("üìù –°—Ç–≤–æ—Ä—é—î–º–æ config.json –∑ config.example.json...")
            with open('config.example.json', 'r', encoding='utf-8') as f:
                example = json.load(f)
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(example, f, indent=2, ensure_ascii=False)
            print("‚úì config.json —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
            print("\n‚ö† –£–í–ê–ì–ê: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ config.json –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è config.json...")
        else:
            raise FileNotFoundError(
                "config.json —Ç–∞ config.example.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n"
                "–°—Ç–≤–æ—Ä—ñ—Ç—å config.json –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥—É –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."
            )

    with open(config_file, 'r', encoding='utf-8') as f:
        return json.load(f)

CONFIG = load_config()

# Chrome –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
CHROME_USER_DATA_DIR = os.path.expanduser(CONFIG['chrome']['user_data_dir'])
CHROME_PROFILE = CONFIG['chrome']['profile']

# –§—ñ–ª—å—Ç—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
MIN_IMAGE_HEIGHT = CONFIG['image_filters']['min_height']
MIN_IMAGE_WIDTH = CONFIG['image_filters']['min_width']
MIN_ASPECT_RATIO = CONFIG['image_filters']['min_aspect_ratio']
MIN_FILE_SIZE_KB = CONFIG['image_filters']['min_file_size_kb']

# –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞
MAX_PARALLEL_DOWNLOADS = CONFIG['performance']['max_parallel_downloads']

# Google Drive –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
SCOPES = ['https://www.googleapis.com/auth/drive.file']
CREDENTIALS_FILE = CONFIG['google_drive']['credentials_file']
TOKEN_FILE = CONFIG['google_drive']['token_file']

# ‚≠ê –ù–û–í–ê –°–ü–†–û–©–ï–ù–ê –°–¢–†–£–ö–¢–£–†–ê
FOLDER_PATH = CONFIG['google_drive'].get('folder_path', '—Å–∫–∞–Ω–∏')  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "—Å–∫–∞–Ω–∏"

# ============================================================================
# WebDriver Setup
# ============================================================================

try:
    print("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è webdriver-manager...")
    service = Service(ChromeDriverManager().install())
    print("‚úì ChromeDriver –≥–æ—Ç–æ–≤–∏–π")
except Exception as e:
    print(f"‚úó –ü–æ–º–∏–ª–∫–∞: {e}")
    service = None

# ============================================================================
# GOOGLE DRIVE FUNCTIONS
# ============================================================================

def get_google_drive_service():
    """–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è Google Drive API service."""
    creds = None
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            if not os.path.exists(CREDENTIALS_FILE):
                raise FileNotFoundError(
                    f"–§–∞–π–ª '{CREDENTIALS_FILE}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n"
                    f"–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ credentials.json –∑ Google Cloud Console.\n"
                    f"–î–∏–≤. —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –≤ SETUP.md"
                )
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(TOKEN_FILE, 'w') as token:
            token.write(creds.to_json())
    return build('drive', 'v3', credentials=creds)


def find_or_create_folder(service, folder_name, parent_id=None):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –ø–∞–ø–∫—É –≤ Google Drive."""
    query = f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder' and trashed=false"
    if parent_id:
        query += f" and '{parent_id}' in parents"
    else:
        query += " and 'root' in parents"

    results = service.files().list(q=query, spaces='drive', fields='files(id, name)').execute()
    files = results.get('files', [])

    if files:
        print(f"  ‚úì –ó–Ω–∞–π–¥–µ–Ω–æ: {folder_name}")
        return files[0]['id']

    file_metadata = {
        'name': folder_name,
        'mimeType': 'application/vnd.google-apps.folder'
    }
    if parent_id:
        file_metadata['parents'] = [parent_id]

    folder = service.files().create(body=file_metadata, fields='id').execute()
    print(f"  ‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ: {folder_name}")
    return folder['id']


def create_folder_structure(service, episode_no):
    """
    ‚≠ê –°–ü–†–û–©–ï–ù–ê –í–ï–†–°–Ü–Ø: –°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∑–∞ —à–ª—è—Ö–æ–º –∑ config.json

    –ü—Ä–∏–∫–ª–∞–¥–∏ —à–ª—è—Ö—ñ–≤:
    - "—Å–∫–∞–Ω–∏" -> —Å—Ç–≤–æ—Ä—é—î –ø–∞–ø–∫—É "—Å–∫–∞–Ω–∏" –≤ –∫–æ—Ä–µ–Ω—ñ
    - "TOG/—Å–∫–∞–Ω–∏" -> —Å—Ç–≤–æ—Ä—é—î TOG/—Å–∫–∞–Ω–∏
    - "TOG/–Ω–æ–≤—ñ —Ä–æ–∑–¥—ñ–ª–∏/—Å–∫–∞–Ω–∏" -> —Å—Ç–≤–æ—Ä—é—î TOG/–Ω–æ–≤—ñ —Ä–æ–∑–¥—ñ–ª–∏/—Å–∫–∞–Ω–∏

    –ó–∞–≤–∂–¥–∏ –¥–æ–¥–∞—î –ø—ñ–¥–ø–∞–ø–∫—É –∑ –Ω–æ–º–µ—Ä–æ–º –µ–ø—ñ–∑–æ–¥—É: —à–ª—è—Ö/{episode_no}/
    """
    print(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–ø–æ–∫ –¥–ª—è –µ–ø—ñ–∑–æ–¥—É {episode_no}...")

    # –†–æ–∑–±–∏–≤–∞—î–º–æ —à–ª—è—Ö –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    path_parts = [part.strip() for part in FOLDER_PATH.split('/') if part.strip()]

    if not path_parts:
        # –Ø–∫—â–æ —à–ª—è—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ—Ä—ñ–Ω—å
        parent_id = None
    else:
        # –°—Ç–≤–æ—Ä—é—î–º–æ/–∑–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–∂–Ω—É –ø–∞–ø–∫—É –≤ —à–ª—è—Ö—É
        parent_id = None
        for folder_name in path_parts:
            parent_id = find_or_create_folder(service, folder_name, parent_id)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –∑ –Ω–æ–º–µ—Ä–æ–º –µ–ø—ñ–∑–æ–¥—É
    episode_folder_id = find_or_create_folder(service, str(episode_no), parent_id)

    return episode_folder_id


def verify_uploaded_file(service, file_id, original_size):
    """
    ‚≠ê –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É

    Returns:
        bool: True —è–∫—â–æ —Ñ–∞–π–ª –≤–∞–ª—ñ–¥–Ω–∏–π
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–∞–π–ª—É –∑ Drive
        file_metadata = service.files().get(fileId=file_id, fields='size,md5Checksum').execute()

        uploaded_size = int(file_metadata.get('size', 0))

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä (–¥–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è 1%)
        size_diff = abs(uploaded_size - original_size) / original_size
        if size_diff > 0.01:
            print(f"    ‚ö† –†–æ–∑–º—ñ—Ä –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î: {uploaded_size} != {original_size}")
            return False

        return True

    except Exception as e:
        print(f"    ‚ö† –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        return False


def upload_to_drive(service, file_data, filename, folder_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –Ω–∞ Google Drive –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é."""
    file_metadata = {'name': filename, 'parents': [folder_id]}

    mimetype = 'image/png'
    if file_data.startswith(b'\xff\xd8'):
        mimetype = 'image/jpeg'

    media = MediaIoBaseUpload(BytesIO(file_data), mimetype=mimetype, resumable=True)

    try:
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id,size'
        ).execute()

        file_id = file.get('id')
        original_size = len(file_data)

        # ‚≠ê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if verify_uploaded_file(service, file_id, original_size):
            print(f"  ‚úì –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {filename} ({original_size/1024:.1f} KB)")
        else:
            print(f"  ‚ö† –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º: {filename}")

        return file_id

    except Exception as e:
        print(f"  ‚úó –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filename}: {e}")
        raise


# ============================================================================
# WEB SCRAPING FUNCTIONS
# ============================================================================

def setup_selenium_driver():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Selenium WebDriver."""
    chrome_options = Options()

    chrome_options.add_argument(f"user-data-dir={CHROME_USER_DATA_DIR}")
    chrome_options.add_argument(f"profile-directory={CHROME_PROFILE}")

    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--remote-debugging-port=9222")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--window-size=1920,1080")

    chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL'})

    if not service:
        raise Exception("ChromeDriver –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Chrome –ø—Ä–æ—Ñ—ñ–ª—é: {CHROME_USER_DATA_DIR}/{CHROME_PROFILE}")
    print("–ó–∞–ø—É—Å–∫ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞...")

    driver = webdriver.Chrome(service=service, options=chrome_options)
    print("‚úì Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    return driver


def wait_for_network_idle_and_collect_images(driver, timeout=30, idle_time=2):
    """–û—á—ñ–∫—É—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è Network –∑–∞–ø–∏—Ç—ñ–≤ —Ç–∞ –∑–±–∏—Ä–∞—î URLs –∑–æ–±—Ä–∞–∂–µ–Ω—å."""
    print(f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–º–∞–∫—Å {timeout}—Å)...", end=" ", flush=True)

    import json

    start_time = time.time()
    last_request_time = start_time
    previous_count = 0

    image_urls = []
    seen_urls = set()

    while time.time() - start_time < timeout:
        logs = driver.get_log('performance')
        current_count = len(logs)

        for entry in logs:
            try:
                log = entry.get('message', '')

                if 'Network.responseReceived' in log:
                    log_data = json.loads(log)
                    response = log_data.get('message', {}).get('params', {}).get('response', {})
                    url = response.get('url', '')
                    mime_type = response.get('mimeType', '')

                    if 'image' in mime_type and 'pstatic.net' in url:
                        if url not in seen_urls:
                            seen_urls.add(url)
                            image_urls.append(url)

            except:
                continue

        if current_count > previous_count:
            last_request_time = time.time()
            previous_count = current_count

        if time.time() - last_request_time >= idle_time:
            elapsed = time.time() - start_time
            print(f"‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f}—Å (–∑–Ω–∞–π–¥–µ–Ω–æ {len(image_urls)} –∑–æ–±—Ä–∞–∂–µ–Ω—å)")
            return image_urls

        time.sleep(0.5)

    elapsed = time.time() - start_time
    print(f"‚ö† Timeout —á–µ—Ä–µ–∑ {elapsed:.1f}—Å (–∑–Ω–∞–π–¥–µ–Ω–æ {len(image_urls)} –∑–æ–±—Ä–∞–∂–µ–Ω—å)")
    return image_urls


def extract_filename_from_url(url):
    """–í–∏—Ç—è–≥—É—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –∑ URL."""
    parsed = urlparse(url)
    filename = os.path.basename(parsed.path)

    if not filename or len(filename) < 5:
        match = re.search(r'/([a-zA-Z0-9_-]{10,})\.(jpg|jpeg|png|gif)', url, re.IGNORECASE)
        if match:
            filename = f"{match.group(1)}.{match.group(2)}"
        else:
            import hashlib
            url_hash = hashlib.md5(url.encode()).hexdigest()[:12]
            filename = f"scan_{url_hash}.jpg"

    return filename


def get_image_dimensions_and_size(img_url, cookies_dict):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º—É—î –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ."""
    try:
        response = requests.get(img_url, cookies=cookies_dict, timeout=20)

        if response.status_code == 200:
            img_data = response.content

            try:
                img = Image.open(BytesIO(img_data))
                width, height = img.size
                size_kb = len(img_data) / 1024
                filename = extract_filename_from_url(img_url)

                return width, height, size_kb, img_data, filename
            except:
                return None

    except:
        pass
    return None


def analyze_single_image(img_url, cookies_dict, index, total):
    """–ê–Ω–∞–ª—ñ–∑—É—î –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏)."""
    result = get_image_dimensions_and_size(img_url, cookies_dict)

    if result:
        width, height, size_kb, img_data, filename = result
        is_scan = is_likely_scan(width, height, size_kb)

        return {
            'url': img_url,
            'width': width,
            'height': height,
            'size_kb': size_kb,
            'img_data': img_data,
            'filename': filename,
            'is_scan': is_scan,
            'index': index
        }

    return None


def is_likely_scan(width, height, size_kb):
    """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∫–∞–Ω–æ–º."""
    if height < MIN_IMAGE_HEIGHT and size_kb < MIN_FILE_SIZE_KB:
        return False
    if width < MIN_IMAGE_WIDTH:
        return False

    aspect_ratio = height / width if width > 0 else 0

    if height >= MIN_IMAGE_HEIGHT or size_kb >= MIN_FILE_SIZE_KB:
        if aspect_ratio >= MIN_ASPECT_RATIO:
            return True

    return False


def scrape_scan_images(driver, url, wait_for_login=False):
    """–ó–±–∏—Ä–∞—î —Å–∫–∞–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏."""
    print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {url}")
    driver.get(url)

    if wait_for_login:
        print("\n" + "=" * 70)
        print("‚ö†Ô∏è  –ù–ï–û–ë–•–Ü–î–ù–ò–ô –í–•–Ü–î –í –ê–ö–ê–£–ù–¢")
        print("=" * 70)
        print("1. –ú–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Å—è –≤—ñ–∫–Ω–æ Chrome")
        print("2. –£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–∫–∞—É–Ω—Ç –Ω–∞ translate.webtoons.com")
        print("3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–µ—Ä–µ–∫–ª–∞–¥—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è")
        print("4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —Ç—É—Ç –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É")
        print("=" * 70)
        input("üëâ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É...")
        print("‚úì –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...\n")

    image_urls = wait_for_network_idle_and_collect_images(driver, timeout=30, idle_time=2)

    print("–ü—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å...")
    for i in range(2):
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(1)

    driver.execute_script("window.scrollTo(0, 0);")

    additional_urls = wait_for_network_idle_and_collect_images(driver, timeout=15, idle_time=1.5)

    all_urls = image_urls + [url for url in additional_urls if url not in image_urls]

    if not all_urls:
        print("‚ö† –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç!")
        return []

    print(f"–í—Å—å–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(all_urls)}")

    selenium_cookies = driver.get_cookies()
    cookies_dict = {cookie['name']: cookie['value'] for cookie in selenium_cookies}

    print(f"–ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π —Ä–µ–∂–∏–º, {MAX_PARALLEL_DOWNLOADS} –ø–æ—Ç–æ–∫—ñ–≤)...")

    scan_images = []

    with ThreadPoolExecutor(max_workers=MAX_PARALLEL_DOWNLOADS) as executor:
        futures = {
            executor.submit(analyze_single_image, url, cookies_dict, idx, len(all_urls)): url
            for idx, url in enumerate(all_urls, 1)
        }

        for future in as_completed(futures):
            result = future.result()

            if result:
                idx = result['index']
                width = result['width']
                height = result['height']
                size_kb = result['size_kb']
                filename = result['filename']
                is_scan = result['is_scan']

                display_name = filename[:30] if len(filename) > 30 else filename
                print(f"[{idx}/{len(all_urls)}] {display_name:30s} {width}x{height}, {size_kb:.1f}KB", end=" ")

                if is_scan:
                    print("‚úì –°–ö–ê–ù")
                    scan_images.append({
                        'data': result['img_data'],
                        'filename': filename,
                        'index': idx
                    })
                else:
                    print("‚úó –ü—Ä–æ–ø—É—Å–∫")

    scan_images.sort(key=lambda x: x['index'])

    return scan_images


# ============================================================================
# MAIN EXECUTION
# ============================================================================

def process_episode(driver, drive_service, webtoon_no, episode_no, is_first_episode=False):
    """–û–±—Ä–æ–±–ª—è—î –æ–¥–∏–Ω –µ–ø—ñ–∑–æ–¥."""
    print("\n" + "=" * 70)
    print(f"–û–ë–†–û–ë–ö–ê –ï–ü–Ü–ó–û–î–£ {episode_no}")
    print("=" * 70)

    url = f"https://translate.webtoons.com/translate/tool?webtoonNo={webtoon_no}&episodeNo={episode_no}&language=UKR&teamVersion=0"

    try:
        folder_id = create_folder_structure(drive_service, episode_no)
        print(f"‚úì –ü–∞–ø–∫–∞ Google Drive –≥–æ—Ç–æ–≤–∞: {FOLDER_PATH}/{episode_no}/\n")
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–ø–æ–∫: {e}")
        import traceback
        traceback.print_exc()
        return False

    try:
        scan_images = scrape_scan_images(driver, url, wait_for_login=is_first_episode)

        print(f"\n‚úì –ó–Ω–∞–π–¥–µ–Ω–æ {len(scan_images)} —Å–∫–∞–Ω(—ñ–≤)")

        if not scan_images:
            print("‚ö† –°–∫–∞–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("  ‚Üí –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç")
            print("  ‚Üí –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î —Å–∫–∞–Ω–∏ –≤ —Ü—å–æ–º—É –µ–ø—ñ–∑–æ–¥—ñ")
            return True

        print("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ Google Drive...")
        successful_uploads = 0

        for scan in scan_images:
            img_data = scan['data']
            filename = scan['filename']

            try:
                upload_to_drive(drive_service, img_data, filename, folder_id)
                successful_uploads += 1
            except Exception as upload_err:
                print(f"  ‚úó –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filename}: {upload_err}")

        print(f"\n‚úì –ï–ø—ñ–∑–æ–¥ {episode_no}: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {successful_uploads}/{len(scan_images)} —Ñ–∞–π–ª—ñ–≤")
        return True

    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."""
    print("=" * 70)
    print("WEBTOONS SCRAPER v3.1")
    print("=" * 70)
    print()

    try:
        webtoon_no = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä Webtoon (–Ω–∞–ø—Ä. 174): ").strip()
        start_episode = int(input("–í–≤–µ–¥—ñ—Ç—å –ü–û–ß–ê–¢–ö–û–í–ò–ô –µ–ø—ñ–∑–æ–¥ (–Ω–∞–ø—Ä. 130): ").strip())
        end_episode = int(input("–í–≤–µ–¥—ñ—Ç—å –ö–Ü–ù–¶–ï–í–ò–ô –µ–ø—ñ–∑–æ–¥ (–Ω–∞–ø—Ä. 135): ").strip())

        if not webtoon_no or start_episode <= 0 or end_episode < start_episode:
            print("‚úó –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ")
            return

    except (ValueError, KeyboardInterrupt):
        print("\n‚úó –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        return

    try:
        drive_service = get_google_drive_service()
        print("‚úì Google Drive –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ")
        print(f"‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫: {FOLDER_PATH}/[–Ω–æ–º–µ—Ä_–µ–ø—ñ–∑–æ–¥—É]/\n")
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ Google Drive: {e}")
        return

    driver = None
    try:
        driver = setup_selenium_driver()

        print("\n" + "=" * 70)
        print(f"–ü–ê–ö–ï–¢–ù–ï –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø: –ï–ø—ñ–∑–æ–¥–∏ {start_episode}-{end_episode}")
        print("=" * 70)

        total_success = 0
        total_failed = 0

        for idx, ep_num in enumerate(range(start_episode, end_episode + 1)):
            is_first = (idx == 0)

            success = process_episode(
                driver,
                drive_service,
                webtoon_no,
                ep_num,
                is_first_episode=is_first
            )

            if success:
                total_success += 1
            else:
                total_failed += 1
                print(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –µ–ø—ñ–∑–æ–¥—É {ep_num}, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")

            if ep_num < end_episode:
                time.sleep(1)

        print("\n" + "=" * 70)
        print("‚úì –ü–ê–ö–ï–¢–ù–ï –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 70)
        print(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {total_success}")
        print(f"–ó –ø–æ–º–∏–ª–∫–∞–º–∏: {total_failed}")
        print(f"–í—Å—å–æ–≥–æ: {total_success + total_failed}")

    except KeyboardInterrupt:
        print("\n\n‚ö† –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+C)")

    except Exception as e:
        print(f"\n‚úó –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

    finally:
        if driver:
            print("\n–ó–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            driver.quit()


if __name__ == "__main__":
    main()